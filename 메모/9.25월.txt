인터페이스 - 구현클래스 - 객체(인스턴스 생성)
함수형 인터페이스(@Funtitonallnterface) - 추상메서드 1개
-> 객체 생성(람다식)
구현메서드
fi = (x) -> x + 1
fi.method() 

정수형, 문자형, 객체(클래스)

배열, ArrayList, HashMap
Stream - 정렬, 배열의 정보, 복사

InputStream

순서가 있는 반복문 - 대용량 자료(배열, 어레이리스트)
for(int i=0; i<list.length; i++){
}
for(Integer n: list){
}
Stream<Integer> stream = list.stream()
stream.forEach((n)->System.out.print(n))

순서가 없는 반복문(set, map)
Iterator <Integer> ir = set.keySet();
while(ir.hasNext()){}

stack과 queue

main() - 스레드(Thread, 작업) : 싱글 스레드
멀티 스레드 - 2개의 작업을 동시에 할수있다
beep() - 소리

프로그램 - beepPrint ->하드디스크 저장
프로세스 - 하드에 있던 소스가 메모리에서 실행될때를 말함

쓰레드 이름 출력
getName() - 이름 가져오기
setName() - 이름 변경

**스레드 생성 방법
1. 쓰레드 직접 생성
Thread thread = new Thread(new Runnable(){
  run();
});

2. 상속
class ThreadA extends Thread{
  run()
}

main()
Thread thread = new Thread()
SumThread - 1부터 10까지 더해
thread.join()

동기화(synchronize) 비동기화(Asynchroinze)
스레드 lock
synchronized void setMemory(){

}

데이터 입출력 - 파일 입출력
주기억장치 - 메모리
입력 - Scanner(System.in)
출력 - System.out.println()

하드디스크 - 파일입출력
a.txt, test.db, data.dat
data - 텍스트, 소리, 영상, 이미지
스트림(stream) - 데이터가 회선을 통해서 패킷 단위로 전송됨
- 바이트(byte) 단위 스트림 : 그림, 영상, 음악 파일
  InputStream(읽기), OutputStream(쓰기)
- 문자 단위 스트림 : 문자만 보내도록 특화되어있음
  Reader(읽기) - FileReader, Writer(쓰기) - FileWriter


boolean(1비트) < byte(1바이트) < char(2바이트) < int(4바이트) < long

스레드
네트워크(TCP) - 서버와 클라이언트
Socket(소켓) - 통신의 장치

사진 복사(이미지를 읽어와서 쓰기)
img1.jpg -> img2.jpg

연산자
비교 연산자
논리 연산자 - &&, ||, !
비트 연산자
 - 비트 논리 연산자: &, |
 - 비트 이동 연산자: >>, <<, 
  int a = 10;
  1010 -> 10
  101000 -> 48
  a<<2 - 변수 a를 2비트만큼 왼쪽으로 이동
  1010 -> 0010 -> 2
  a>>2 - 변수 a를 2비트만큼 오른쪽으로 이동

ArrayList - Queue방식(선입선출)
add('a')
add('b')
add('c')
  a b c -> 출력: a-b-c 
  0 1 2

ArrayList - Stack방식 구현
push('a')
push('b')
push('c')
 a b c -> 출력: c-b-a










